{
    "label": "Veritone User",
    "name": "veritoneuser",
    "apiVersion": "v1",
    "internal": false,
    "configurationType": "PER_USER",
    "deployment": {
        "profiles":[
            {
                "name": "default",
                "label": "Default",
                "memory": 256,
                "description": "Default configuration"
            }
        ],
        "allowMultipleInstances": false
    },
    "status": "ACTIVE",
    "stores": [],
    "events": [
        {
            "label": "Webhook",
            "name": "webhook",
            "description": "Webhook sent from the Veritone platform"
        }
    ],
    "functions": [
        {
            "label": "User POST",
            "name": "_userPost",
            "functionType": "PER_USER",
            "description": "Sends a POST request using user credentials"
        },
        {
            "label": "User GET",
            "name": "_userGet",
            "functionType": "PER_USER",
            "description": "Sends a GET request using user credentials"
        }
    ],
    "scripts": [
        "helpers.js",
        "functions.js"
    ],
    "listeners":[],
    "configuration":[
        {
            "name": "config1",
            "label": "OAuth config",
            "value": "The following fields are needed to access the API as a Veritone User.",
            "type": "info"
        },
        {
            "name": "environment",
            "label": "Environment",
            "type": "text",
            "required": true
        },
        {
            "name": "clientId",
            "label": "Client ID",
            "description": "The client ID used for OAuth",
            "type": "text",
            "required": true
        },
        {
            "name": "clientSecret",
            "label": "Client secret",
            "description": "The client secret used for OAuth",
            "type": "text",
            "required": true
        },
        {
            "name": "oauthCallback",
            "label": "OAuth callback",
            "description": "The OAuth callback to configure in your Veritone App",
            "type": "label",
            "value": "config.WEBHOOK_URL+'/authCallback'"
        }
    ],
    "userConfiguration":[
        {
            "name": "code",
            "label": "Token",
            "type": "text",
            "visibility": false
        },
        {
            "name": "redirectUri",
            "label": "Redirect URI",
            "type": "text",
            "visibility": false
        },
        {
            "name" : "connectButton",
            "label" : "Connect to Veritone",
            "type" : "button",
            "typeOptions": {
                "color": "primary",
                "icon": "zmdi-play",
                "action": "var redirectUri = config.WEBHOOK_URL + '/authCallback';\nvar url = (config.ENDPOINT_CONFIG['environment'] === 'production' ? 'https://api.veritone.com' : 'https://api.stage.us-1.veritone.com')+'/v1/admin/oauth/authorize?response_type=code&client_id='+config.ENDPOINT_CONFIG['clientId']+'&redirect_uri='+redirectUri+'&scope=all';\nvar win = window.open(url, 'Authorization page', 'toolbar=no,scrollbars=no,location=no,statusbar=no,menubar=no,resizable=0,width=500,height=600,left='+((screen.width/2)-250)+',top='+((screen.height/2)-250)+',');\n\nvar self = this;\n\nvar intervalFn = function() {\n\ttry {\n\t\tif (!win || !win.document) {\n\t\t\twindow.clearInterval(pollTimer);\n\t\t}else{\n\t\t\tif (win.document.URL.indexOf('/authCallback') != -1) {\n\t\t\t\twin.innerWidth = 100;\n\t\t\t\twin.innerHeight = 100;\n\t\t\t\twin.screenX = screen.width;\n\t\t\t\twin.screenY = screen.height;\n\t\t\t\twindow.clearInterval(pollTimer);\n\t\t\t\turl = win.document.URL;\n\t\t\t\tvar pos = url.indexOf('code=');\n\t\t\t\tif(pos > -1) {\n\t\t\t\t\tvar token = url.substring(pos + 5);\n\t\t\t\t\t\t\t\t\t\tvar limit = token.indexOf(\"&\");\n\t\t\t\t\tif (limit > -1) {\n\t\t\t\t\t\ttoken = token.substring(0, limit);\n\t\t\t\t\t}\nconfig.code = token;\n\t\t\t\t\tconfig.redirectUri = redirectUri;\n\t\t\t\t\tif (utils.connectToService) {\n\t\t\t\t\t\tutils.connectToService();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttry{win.close();}catch(e){}\n\t\t\t}\n\t\t}\n\t} catch(e) {}\n};\n\nvar pollTimer = window.setInterval(function() {intervalFn.apply(self);}, 500);"
            },
            "visibility" : "config.ENDPOINT_STATUS == 'DISCONNECTED'"
        }
    ],
    "userConfigurationButtons":{
        "connect": false
    }
}
